
require 'logger'
require 'time'

# Logger setup
$log = Logger.new(STDOUT)

$log.formatter = proc do |severity, datetime, progname, msg|
  "#{severity}: #{msg}\n"
end

# Module for logging method invocations
module MethodLogger
  def self.prepended(base)
    base.extend(ClassMethods)
  end

  module ClassMethods
    def method_added(method_name)
      return if @logging_in_progress # Avoid wrapping already wrapped methods

      @logging_in_progress = true
      original_method = instance_method(method_name)

      define_method(method_name) do |*args, &block|
        start_time = Time.now
#        $log.info("#{start_time} - Calling: #{method_name} with args: #{args.inspect}")

        result = original_method.bind(self).call(*args, &block)

        end_time = Time.now
        time = (end_time - start_time).round(2)
        header = time > 0.5 ? "HOT " : ""
        $log.info("#{header}#{time} sec #{method_name}(#{args.inspect})")

        result
      end

      @logging_in_progress = false
    end
  end
end

# Example class to demonstrate logging
#class MyClass
#  prepend MethodLogger

#  def foo(arg)
#    sleep(1) # Simulate some work
#    "Foo received #{arg}"
#  end

#  def bar(arg1, arg2)
#    sleep(2) # Simulate some work
#    "Bar received #{arg1} and #{arg2}"
#  end
#end

# Example usage
#obj = MyClass.new
#obj.foo("test")
#obj.bar("hello", "world")


