#!/usr/bin/ruby

require 'mysql2'
require 'io/console'
require 'optparse'

# Default options
options = {
  user: nil,
  password: nil,
  name: nil,
  email: nil
}

# Parse options
OptionParser.new do |opts|
  opts.banner = "Usage: user.add [options]"

  opts.on('-e', '--email EMAIL', 'Email of the new user') do |email|
    options[:email] = email
  end

  opts.on('-p', '--password PASSWORD', 'Password of the new user') do |password|
    options[:password] = password
  end

  opts.on_tail('--help', 'Display this help message') do
    puts opts
    exit
  end
end.parse!

# username is defined as email before @
options[:user] = options[:email].split('@').first

# individual human name is constructed based on email, too
options[:name] = if options[:user].include?('.')
                   parts = options[:user].split('.')
                   "#{parts.first.capitalize} #{parts.last.capitalize}"
                 else
                   options[:user].capitalize
                 end
puts options.inspect

if not (options[:user] && options[:name] && options[:email] && options[:password])
  puts "Missing required options. Use --help for usage details."
end

query_create = <<-SQL
CREATE USER IF NOT EXISTS '#{options[:user]}'@'%' IDENTIFIED BY '#{options[:password]}';
SQL

query_create_app = <<-SQL
INSERT IGNORE INTO users (username, name, email)
VALUES ('#{options[:user]}', '#{options[:name]}', '#{options[:email]}');
SQL

query_grant = <<-SQL
GRANT SELECT, INSERT ON BENCHMARKING.* TO '#{options[:user]}'@'%';
SQL

# Ask for ADMIN explicitly
print "Enter ADMIN username: "
username = gets.chomp
print "Enter ADMIN password: "
password = STDIN.noecho(&:gets).chomp
puts # Move to the next line after password input

begin
  puts "Connecting to the database..."
  client = Mysql2::Client.new(
    username: username,
    password: password,
    default_file: File.expand_path('~/.my.cnf') # Specify the default configuration file
  )
  puts "Creating the user..."
  client.query(query_create)
  client.query(query_create_app)
  puts "Granting rights to the user..."
  client.query(query_grant)
  puts "User '#{options[:user]}' named '#{options[:name]}' created successfully"
rescue Mysql2::Error => e
  puts "An error occurred while executing query: #{e.message}"
ensure
  client.close if client
end

