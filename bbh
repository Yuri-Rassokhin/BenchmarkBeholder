#!/usr/bin/env ruby

require "bundler/setup"
require 'flex-cartesian'

require './sources/infra/scheduler'
require './sources/infra/platform'
require './sources/infra/utilities_general' # TODO: restructure
require './sources/options'
#require './sources/target' # TODO: correct it and enable
require './sources/config'
require './sources/node'
require './sources/workload'
require './sources/log'
require './sources/utilities'

series = Time.now.to_i.to_s
logger = Log.new

options = Options.new(logger, ARGV)
config = Config.new(logger, options.workload)
workload = Workload.new(logger: logger, config: config)

logger.info "parameter space: #{workload.dimensions(separator: ', ')}"
logger.info "total invocations: #{workload.size}"
exit 0 if options.space_mode

Node.check(logger: logger, config: config)

workload.preparation

TODO: most of the target is not needed - just accumulate data collection in Platform object.
TODO: the user will decide if they need to add Platform data to the metrics
TODO: Similarly, the user will be able to call Scheduler from the metrics, etc.
TODO: NO automated checks - just provide modularized methods to hook creator.
target = Target.new(logger, config)
platform = Platform.new(logger, target)

logger.info "Starting series #{series}"
config[:sweep][:series] = series

space.func(:run)
logger.info "Series #{series} completed"

TODO: to replace this chunk with last function that pushes each result outside
TODO: to initialize the report in prepare method of the hook
report = "./log/bbh-#{hook}-#{series}-result.csv"
FileUtils.mkdir_p(File.dirname(report))
space.output(format: :csv, file: report)
space.output(colorize: true, align: true)

